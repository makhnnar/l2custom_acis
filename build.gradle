plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id("org.jetbrains.kotlin.plugin.serialization") version "1.8.0"
    id 'java'
    id 'application'
}

ext {
    mainFolder = "l2custom_acis"
    gameServer = "game"
    loginServer = "login"
    config = "config"
    logs = "log"
    data = "data"
    libs = "libs"
    sql = "sql"
    tools = "tools"
    versionName = '1.2'
}

group 'net.sf.l2j'
version versionName

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.mchange/c3p0
    implementation 'com.mchange:c3p0:0.9.5-pre5'

    // https://mvnrepository.com/artifact/com.mchange/mchange-commons-java
    implementation 'com.mchange:mchange-commons-java:0.2.6.2'

    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation 'mysql:mysql-connector-java:8.0.15'

    implementation "io.ktor:ktor-server-core:2.2.4"
    implementation "io.ktor:ktor-server-netty:2.2.4"
    implementation "io.ktor:ktor-server-status-pages:2.2.4"
    implementation "io.ktor:ktor-server-default-headers:2.2.4"
    implementation("io.ktor:ktor-server-content-negotiation:2.2.4")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.2.4")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
    implementation 'org.slf4j:slf4j-simple:1.7.36'
}

jar {
    archivesBaseName  = 'l2jserver'
    manifest {
        attributes(
            "Main-Class": "net.sf.l2j.Server"
            //"Class-Path": "${manifest.libs}"
        )
    }
    //to include all in one jar. not necessary
    /*from {
        configurations.runtimeClasspath.filter{
            it.exists()
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }*/
}


test {
    useJUnitPlatform()
}

def filesDirectories() {
    mkdir layout.buildDirectory.dir("$mainFolder")
    mkdir layout.buildDirectory.dir("$mainFolder/$loginServer")
    mkdir layout.buildDirectory.dir("$mainFolder/$loginServer/$logs")
    mkdir layout.buildDirectory.dir("$mainFolder/$loginServer/$config")
    mkdir layout.buildDirectory.dir("$mainFolder/$loginServer/$libs")
    mkdir layout.buildDirectory.dir("$mainFolder/$gameServer")
    mkdir layout.buildDirectory.dir("$mainFolder/$gameServer/$config")
    mkdir layout.buildDirectory.dir("$mainFolder/$gameServer/$logs")
    mkdir layout.buildDirectory.dir("$mainFolder/$gameServer/$data")
    mkdir layout.buildDirectory.dir("$mainFolder/$gameServer/$libs")
    mkdir layout.buildDirectory.dir("$mainFolder/$sql")
    mkdir layout.buildDirectory.dir("$mainFolder/$tools")
}

tasks.register('copyDocsFiles') {
    doFirst {
        filesDirectories()
    }
    doLast {
        try {
            initLoginMainFolder()
            initLoginConfigFolder()
            initGameMainFolder()
            initGameConfigFolder()
            initGameDataFolder()
            initSqlFolder()
            initToolsFolder()
            initLoginLibsFolder()
            initGameLibsFolder()
        } catch (e) {
            println(e)
        }
    }
}

def initLoginMainFolder() {
    copy {
        println("copying login folder")
        from('src/main/resources/dist') {
            include 'startAccountManager.*'
            include 'startSQLAccountManager.*'
            include 'LoginServer_loop.sh'
            include 'startLoginServer.*'
            include 'RegisterGameServer.*'
        }
        from('src/main/resources/data') {
            include "serverNames.xml"
        }
        into layout.buildDirectory.dir('l2custom_acis/login')
        println("copyed login folder")
    }
}

def initLoginConfigFolder() {
    copy {
        println("copying login/config folder")
        from('src/main/resources/config') {
            include 'banned_ips.properties'
            include 'logging.properties'
            include 'loginserver.properties'
        }
        into layout.buildDirectory.dir('l2custom_acis/login/config')
        println("copyed login/config folder")
    }
}

def initLoginLibsFolder() {
    copy {
        println("copying login/libs folder")
        from('build/libs') {
            include "*.jar"
        }
        into layout.buildDirectory.dir('l2custom_acis/login/libs')
        println("copyed login/libs folder")
    }
}

def initGameMainFolder() {
    copy {
        println("copying game folder")
        from('src/main/resources/dist') {
            include 'GameServer_loop.sh'
            include 'startGameServer.*'
            include 'startCmsServer.*'
            include 'GeoDataConverter.*'
        }
        into layout.buildDirectory.dir('l2custom_acis/game')
        println("copyed game folder")
    }
}

def initGameConfigFolder() {
    copy {
        println("copying game/config folder")
        from('src/main/resources/config') {
            include '*.properties'
            exclude 'banned_ips.properties'
            exclude 'loginserver.properties'
        }
        into layout.buildDirectory.dir('l2custom_acis/game/config')
        println("copyed game/config folder")
    }
}

def initGameDataFolder() {
    copy {
        println("copying game/data folder")
        from('src/main/resources/data') {
            exclude '.project'
            exclude 'log/**'
            exclude 'cachedir/**'
            exclude 'clans/**'
            exclude 'crests/**'
            exclude '**.svn**'
            exclude '**/*.class'
            exclude '**/*.jar'
            include '**/*.*'
        }
        into layout.buildDirectory.dir('l2custom_acis/game/data')
        println("copyed game/data folder")
    }
}

def initGameLibsFolder() {
    copy {
        println("copying game/libs folder")
        from('build/libs') {
            include "*.jar"
        }
        into layout.buildDirectory.dir('l2custom_acis/game/libs')
        println("copyed game/libs folder")
    }
}

def initSqlFolder() {
    copy {
        println("copying sql folder")
        from('src/main/resources/sql') {
            include '*.*'
        }
        into layout.buildDirectory.dir('l2custom_acis/sql')
        println("copyed sql folder")
    }
}

def initToolsFolder() {
    copy {
        println("copying tools folder")
        from('src/main/resources/tools') {
            include '*.*'
            exclude 'database_installer.rc'
            exclude '*.txt'
            exclude '*.log'
            exclude '*backup.sql'
        }
        into layout.buildDirectory.dir('l2custom_acis/tools')
        println("copyed tools folder")
    }
}

tasks.register('copyDependenciesToLibFolder', Copy) {
    from configurations.runtimeClasspath
    into layout.buildDirectory.dir('libs')
}

tasks.register('deleteBuild', Delete) {
    delete layout.buildDirectory.dir("$mainFolder")
    delete layout.buildDirectory.dir('libs')
}

build {
    copyDependenciesToLibFolder
    copyDocsFiles
}

